# generated by fastapi-codegen:
#   filename:  codegen\climb_api.yaml
#   timestamp: 2022-06-01T15:09:47+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Extra, Field


class Housing(BaseModel):
    class Config:
        extra = Extra.forbid

    housingKey: Optional[int] = None
    dateIn: Optional[str] = None
    dateOut: Optional[str] = None


class AnimalCharacteristicValue(BaseModel):
    class Config:
        extra = Extra.forbid

    animalCharacteristicKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class CreateAnimalRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    lineKey: Optional[int] = Field(None, description='The line Key.')
    sexKey: Optional[int] = Field(None, description='The sex Key.')
    generationKey: Optional[int] = Field(None, description='The generation Key.')
    breedingStatusKey: Optional[int] = Field(
        None, description='The breeding status Key.'
    )
    dietKey: Optional[int] = Field(None, description='The diet Key of the animal.')
    animalStatusKey: Optional[int] = Field(None, description='The animal status Key.')
    exitReasonKey: Optional[int] = Field(None, description='The exit reason Key.')
    animalName: Optional[str] = Field(None, description='The animal name.')
    physicalMarker: Optional[str] = Field(
        '', description='The physical marker.', example=''
    )
    dateBorn: Optional[datetime] = Field(
        None, description='The date the animal was born.'
    )
    dateExit: Optional[datetime] = Field(
        None, description='The date the animal was existed.'
    )
    comments: Optional[str] = Field(
        '',
        description='Represents any comments about the animal and its studies from the lab.',
        example='',
    )
    owner: Optional[str] = Field('', description='The owner of the animal.', example='')
    dateOrigin: Optional[datetime] = Field(
        None, description='The date of origin of the animal.'
    )
    animalUseKey: Optional[int] = Field(None, description='The animal use Key,')
    animalMatingStatusKey: Optional[int] = Field(
        None, description='The animal mating status Key.'
    )
    iacucprotocolKey: Optional[int] = Field(None, description='The Iacuc protocol Key.')
    physicalMarkerTypeKey: Optional[int] = Field(
        None, description='The physical market type Key.'
    )
    materialOriginKey: Optional[int] = Field(
        None, description='The material origin Key.'
    )
    externalIdentifier: Optional[str] = Field(
        None, description='The external identifier of the material.'
    )
    microchipIdentifier: Optional[str] = Field(
        None, description='The microchip identifier of the material.'
    )
    jobKeys: Optional[List[int]] = Field(None, description='The list of job Keys.')
    cohortKeys: Optional[List[int]] = Field(
        None, description='The list of cohort Keys.'
    )
    housings: Optional[List[Housing]] = Field(None, description='The list of housingS.')
    animalCharacteristics: Optional[List[AnimalCharacteristicValue]] = Field(
        None, description='The list of AnimalCharacteristicValues.'
    )


class CreateAnimalRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    lineKey: Optional[int] = Field(None, description='The line Key.')
    sexKey: Optional[int] = Field(None, description='The sex Key.')
    generationKey: Optional[int] = Field(None, description='The generation Key.')
    breedingStatusKey: Optional[int] = Field(
        None, description='The breeding status Key.'
    )
    dietKey: Optional[int] = Field(None, description='The diet Key of the animal.')
    animalStatusKey: Optional[int] = Field(None, description='The animal status Key.')
    exitReasonKey: Optional[int] = Field(None, description='The exit reason Key.')
    animalName: Optional[str] = Field(None, description='The animal name.')
    physicalMarker: Optional[str] = Field(
        '', description='The physical marker.', example=''
    )
    dateBorn: Optional[datetime] = Field(
        None, description='The date the animal was born.'
    )
    dateExit: Optional[datetime] = Field(
        None, description='The date the animal was existed.'
    )
    comments: Optional[str] = Field(
        '',
        description='Represents any comments about the animal and its studies from the lab.',
        example='',
    )
    owner: Optional[str] = Field('', description='The owner of the animal.', example='')
    dateOrigin: Optional[datetime] = Field(
        None, description='The date of origin of the animal.'
    )
    animalUseKey: Optional[int] = Field(None, description='The animal use Key,')
    animalMatingStatusKey: Optional[int] = Field(
        None, description='The animal mating status Key.'
    )
    iacucprotocolKey: Optional[int] = Field(None, description='The Iacuc protocol Key.')
    physicalMarkerTypeKey: Optional[int] = Field(
        None, description='The physical market type Key.'
    )
    materialOriginKey: Optional[int] = Field(
        None, description='The material origin Key.'
    )
    externalIdentifier: Optional[str] = Field(
        None, description='The external identifier of the material.'
    )
    microchipIdentifier: Optional[str] = Field(
        None, description='The microchip identifier of the material.'
    )
    jobKeys: Optional[List[int]] = Field(None, description='The list of job Keys.')
    cohortKeys: Optional[List[int]] = Field(
        None, description='The list of cohort Keys.'
    )
    housings: Optional[List[Housing]] = Field(None, description='The list of housingS.')
    animalCharacteristics: Optional[List[AnimalCharacteristicValue]] = Field(
        None, description='The list of AnimalCharacteristicValues.'
    )


class BulkCreateAnimalRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    createAnimalRequestDtos: Optional[List[CreateAnimalRequestDto]] = None


class CreateBirthRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    birthID: Optional[str] = None
    matingID: Optional[str] = None
    animalIds: Optional[List[int]] = None
    birthStatusKey: Optional[int] = None
    birthDate: Optional[datetime] = None
    weanDate: Optional[datetime] = None
    comments: Optional[str] = None
    liveBornCount: Optional[int] = None
    stillbornCount: Optional[int] = None
    deadCount: Optional[int] = None
    isFoster: Optional[bool] = Field(False, example=False)
    fosterHousingID: Optional[str] = None


class CreateBirthRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    birthID: Optional[str] = None
    matingID: Optional[str] = None
    animalIds: Optional[List[int]] = None
    birthStatusKey: Optional[int] = None
    birthDate: Optional[datetime] = None
    weanDate: Optional[datetime] = None
    comments: Optional[str] = None
    liveBornCount: Optional[int] = None
    stillbornCount: Optional[int] = None
    deadCount: Optional[int] = None
    isFoster: Optional[bool] = Field(False, example=False)
    fosterHousingID: Optional[str] = None


class BulkCreateBirthRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    createBirthRequestDtos: Optional[List[CreateBirthRequestDto]] = None


class CreateAnimalCharacteristicRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    taxonKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateSampleCharacteristicRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    sampleTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateJobCharacteristicRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    jobTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateStudyCharacteristicRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    studyTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateAnimalCharacteristicRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    taxonKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateSampleCharacteristicRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    sampleTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateJobCharacteristicRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    jobTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateStudyCharacteristicRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    studyTypeKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    dataTypeKey: Optional[int] = None
    enumerationKey: Optional[int] = None
    isActive: Optional[bool] = None
    minimunValue: Optional[str] = None
    maximumValue: Optional[str] = None
    decimalPlaces: Optional[int] = None
    numberOfRows: Optional[int] = None


class CreateAnimalCharacteristicInstanceRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    animalCharacteristicKey: Optional[int] = None
    materialKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class CreateSampleCharacteristicInstanceRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    sampleCharacteristicKey: Optional[int] = None
    materialKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class CreateJobCharacteristicInstanceRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    jobCharacteristicKey: Optional[int] = None
    jobKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class CreateStudyCharacteristicInstanceRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    studyCharacteristicKey: Optional[int] = None
    studyKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class Error(BaseModel):
    class Config:
        extra = Extra.forbid

    propertyName: Optional[str] = None
    errorMessage: Optional[str] = None


class StringResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[str] = None
    hasErrors: Optional[bool] = None
    errors: Optional[List[Error]] = None


class GenotypeDateAssaySymbolDto(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[str] = None
    genotypeAssayKey: Optional[int] = None
    genotypeSymbolKey: Optional[int] = None


class GenotypeRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    animalID: Optional[int] = None
    plateKey: Optional[int] = None
    genotypes: Optional[List[GenotypeDateAssaySymbolDto]] = None


class CreateGenotypeRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    genotypeRequestDtos: Optional[List[GenotypeRequestDto]] = None


class UpdateGenotypeRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    animalID: Optional[int] = None
    plateKey: Optional[int] = None
    date: Optional[str] = None
    genotypeAssayKey: Optional[int] = None
    genotypeSymbolKey: Optional[int] = None


class HousingLocationDto(BaseModel):
    class Config:
        extra = Extra.forbid

    locationKey: Optional[int] = None
    dateIn: Optional[str] = None
    dateOut: Optional[str] = None


class CreateHousingRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    materialPoolID: Optional[str] = Field(None, description='The materialPool ID.')
    housingTypeKey: Optional[int] = Field(None, description='The housingTypeKey Key.')
    housingStatusKey: Optional[int] = Field(None, description='The housingStatusKey Key.')
    date: Optional[datetime] = Field(None, description='The date')
    owner: Optional[str] = Field(None, description='The owner.')
    containerTypeKey: Optional[int] = Field(None, description='The containerType Key.')
    comments: Optional[str] = Field(None, description='The comments.')
    animalIds: Optional[List[int]] = Field(None, description='The list of animal Ids.')
    locations: Optional[List[HousingLocationDto]] = None


class CreateHousingRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    materialPoolID: Optional[str] = Field(None, description='The materialPool ID.')
    housingTypeKey: Optional[int] = Field(None, description='The housingTypeKey Key.')
    housingStatusKey: Optional[int] = Field(
        None, description='The housingStatusKey Key.'
    )
    date: Optional[datetime] = Field(None, description='The date')
    owner: Optional[str] = Field(None, description='The owner.')
    containerTypeKey: Optional[int] = Field(None, description='The containerType Key.')
    comments: Optional[str] = Field(None, description='The comments.')
    animalIds: Optional[List[int]] = Field(None, description='The list of animal Ids.')
    locations: Optional[List[HousingLocationDto]] = None


class BulkCreateHousingRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    createHousingRequestDtos: Optional[List[CreateHousingRequestDto]] = None


class CreateLineRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    isActive: Optional[bool] = Field(None, description='The Active flag')
    lineName: Optional[str] = Field(None, description='The line name')
    shortName: Optional[str] = Field(None, description='The short name')
    stock: Optional[str] = Field(None, description='The stock')
    lineTypeKey: Optional[int] = Field(None, description='The line type key')
    lineStatusKey: Optional[int] = Field(None, description='The line status key')
    taxonKey: Optional[int] = Field(None, description='The taxon key')
    constructKey: Optional[int] = Field(None, description='The construct key')
    genotypeAssayKeys: Optional[List[int]] = Field(
        None, description='The genotype assay keys'
    )
    technician: Optional[str] = Field(None, description='The technician')
    parentLine: Optional[str] = Field(None, description='The parent line')
    backgroundLine: Optional[str] = Field(None, description='The background line')
    breedingStrategy: Optional[str] = Field(None, description='The breeding strategy')
    development: Optional[str] = Field(None, description='The development')
    externalLink: Optional[str] = Field(None, description='The external link')
    references: Optional[str] = Field(None, description='The refereneces')
    comments: Optional[str] = Field(None, description='The comments')
    defaultLocationKey: Optional[int] = Field(
        None, description='The default Location key'
    )


class CreateLineRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    isActive: Optional[bool] = Field(None, description='The Active flag')
    lineName: Optional[str] = Field(None, description='The line name')
    shortName: Optional[str] = Field(None, description='The short name')
    stock: Optional[str] = Field(None, description='The stock')
    lineTypeKey: Optional[int] = Field(None, description='The line type key')
    lineStatusKey: Optional[int] = Field(None, description='The line status key')
    taxonKey: Optional[int] = Field(None, description='The taxon key')
    constructKey: Optional[int] = Field(None, description='The construct key')
    genotypeAssayKeys: Optional[List[int]] = Field(
        None, description='The genotype assay keys'
    )
    technician: Optional[str] = Field(None, description='The technician')
    parentLine: Optional[str] = Field(None, description='The parent line')
    backgroundLine: Optional[str] = Field(None, description='The background line')
    breedingStrategy: Optional[str] = Field(None, description='The breeding strategy')
    development: Optional[str] = Field(None, description='The development')
    externalLink: Optional[str] = Field(None, description='The external link')
    references: Optional[str] = Field(None, description='The refereneces')
    comments: Optional[str] = Field(None, description='The comments')
    defaultLocationKey: Optional[int] = Field(
        None, description='The default Location key'
    )


class MatingLocationDto(BaseModel):
    class Config:
        extra = Extra.forbid

    locationKey: Optional[int] = None
    dateIn: Optional[str] = None
    dateOut: Optional[str] = None


class CreateMatingRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    matingID: Optional[str] = None
    housingID: Optional[str] = None
    matingStatusKey: Optional[int] = None
    lineKey: Optional[int] = None
    matingDate: Optional[datetime] = None
    matingTypeKey: Optional[int] = None
    matingPurposeKey: Optional[int] = None
    offspringGenerationKey: Optional[int] = None
    containerTypeKey: Optional[int] = None
    animalIds: Optional[List[int]] = None
    jobKeys: Optional[List[int]] = None
    locations: Optional[List[MatingLocationDto]] = None


class CreateMatingRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    matingID: Optional[str] = None
    housingID: Optional[str] = None
    matingStatusKey: Optional[int] = None
    lineKey: Optional[int] = None
    matingDate: Optional[datetime] = None
    matingTypeKey: Optional[int] = None
    matingPurposeKey: Optional[int] = None
    offspringGenerationKey: Optional[int] = None
    containerTypeKey: Optional[int] = None
    animalIds: Optional[List[int]] = None
    jobKeys: Optional[List[int]] = None
    locations: Optional[List[MatingLocationDto]] = None


class BulkCreateMatingRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    createMatingRequestDtos: Optional[List[CreateMatingRequestDto]] = None


class SourceAnimalDto(BaseModel):
    class Config:
        extra = Extra.forbid

    materialKey: Optional[int] = None
    animalStatusKey: Optional[int] = None


class SourceSampleDto(BaseModel):
    class Config:
        extra = Extra.forbid

    materialKey: Optional[int] = None
    sampleStatusKey: Optional[int] = None


class SampleLocationDto(BaseModel):
    class Config:
        extra = Extra.forbid

    locationKey: Optional[int] = None
    dateIn: Optional[str] = None
    dateOut: Optional[str] = None
    createdBy: Optional[str] = None
    dateCreated: Optional[datetime] = None
    modifiedBy: Optional[str] = None
    dateModified: Optional[datetime] = None


class SampleCharacteristicValue(BaseModel):
    class Config:
        extra = Extra.forbid

    sampleCharacteristicKey: Optional[int] = None
    characteristicValue: Optional[str] = None


class CreateSampleRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None
    sourceAnimals: Optional[List[SourceAnimalDto]] = None
    sourceSamples: Optional[List[SourceSampleDto]] = None
    locations: Optional[List[SampleLocationDto]] = None
    sampleTypeKey: Optional[int] = None
    timeUnitValue: Optional[int] = None
    timeUnitKey: Optional[int] = None
    dateHarvest: Optional[datetime] = None
    preservationMethodKey: Optional[int] = None
    expirationDate: Optional[datetime] = None
    lineKey: Optional[int] = None
    sampleStatusKey: Optional[int] = None
    materialOriginKey: Optional[int] = None
    microchipId: Optional[str] = None
    externalId: Optional[str] = None
    containerTypeKey: Optional[int] = None
    measurement: Optional[int] = None
    unitKey: Optional[int] = None
    jobKeys: Optional[List[int]] = None
    constructKeys: Optional[List[int]] = None
    description: Optional[str] = None
    orderKey: Optional[int] = None
    lotKey: Optional[int] = None
    sampleCharacteristics: Optional[List[SampleCharacteristicValue]] = Field(
        None, description='The list of SampleCharacteristicValues.'
    )


class CreateSampleRequestDto(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None
    sourceAnimals: Optional[List[SourceAnimalDto]] = None
    sourceSamples: Optional[List[SourceSampleDto]] = None
    locations: Optional[List[SampleLocationDto]] = None
    sampleTypeKey: Optional[int] = None
    timeUnitValue: Optional[int] = None
    timeUnitKey: Optional[int] = None
    dateHarvest: Optional[datetime] = None
    preservationMethodKey: Optional[int] = None
    expirationDate: Optional[datetime] = None
    lineKey: Optional[int] = None
    sampleStatusKey: Optional[int] = None
    materialOriginKey: Optional[int] = None
    microchipId: Optional[str] = None
    externalId: Optional[str] = None
    containerTypeKey: Optional[int] = None
    measurement: Optional[int] = None
    unitKey: Optional[int] = None
    jobKeys: Optional[List[int]] = None
    constructKeys: Optional[List[int]] = None
    description: Optional[str] = None
    orderKey: Optional[int] = None
    lotKey: Optional[int] = None
    sampleCharacteristics: Optional[List[SampleCharacteristicValue]] = Field(
        None, description='The list of SampleCharacteristicValues.'
    )


class BulkCreateSampleRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    createSampleRequestDtos: Optional[List[CreateSampleRequestDto]] = None


class WorkflowTaskDto(BaseModel):
    class Config:
        extra = Extra.forbid

    workflowTaskKey: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    isActive: Optional[bool] = None
    cost: Optional[float] = None
    duration: Optional[float] = None
    noMaterials: Optional[bool] = None
    inputsCount: Optional[int] = None
    outputsCount: Optional[int] = None
    protocolKey: Optional[int] = None
    createdBy: Optional[str] = None
    dateCreated: Optional[datetime] = None
    modifiedBy: Optional[str] = None
    dateModified: Optional[datetime] = None


class WorkflowTaskDtoPagedQueryResult(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[WorkflowTaskDto]] = None
    totalItemCount: Optional[int] = Field(
        None, description='The total number of items for this query.'
    )
    pageSize: Optional[int] = Field(
        None,
        description='The number of items to return for each page. This will only return a maximum of 100 items.',
    )
    pageNumber: Optional[int] = Field(None, description='The current page number.')
    pageCount: Optional[int] = Field(
        None, description='The total number of pages available.'
    )


class WorkflowTaskDtoPagedQueryResultResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[WorkflowTaskDtoPagedQueryResult] = None
    hasErrors: Optional[bool] = None
    errors: Optional[List[Error]] = None


class InputDto(BaseModel):
    class Config:
        extra = Extra.forbid

    inputKey: Optional[int] = None
    name: Optional[str] = None
    dataType: Optional[str] = None
    active: Optional[bool] = None
    valueRequired: Optional[bool] = None
    createdBy: Optional[str] = None
    dateCreated: Optional[datetime] = None
    modifiedBy: Optional[str] = None
    dateModified: Optional[datetime] = None


class InputDtoPagedQueryResult(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[InputDto]] = None
    totalItemCount: Optional[int] = Field(
        None, description='The total number of items for this query.'
    )
    pageSize: Optional[int] = Field(
        None,
        description='The number of items to return for each page. This will only return a maximum of 100 items.',
    )
    pageNumber: Optional[int] = Field(None, description='The current page number.')
    pageCount: Optional[int] = Field(
        None, description='The total number of pages available.'
    )


class InputDtoPagedQueryResultResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[InputDtoPagedQueryResult] = None
    hasErrors: Optional[bool] = None
    errors: Optional[List[Error]] = None


class OutputDto(BaseModel):
    class Config:
        extra = Extra.forbid

    outputKey: Optional[int] = None
    name: Optional[str] = None
    dataType: Optional[str] = None
    active: Optional[bool] = None
    createdBy: Optional[str] = None
    dateCreated: Optional[datetime] = None
    modifiedBy: Optional[str] = None
    dateModified: Optional[datetime] = None


class OutputDtoPagedQueryResult(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[OutputDto]] = None
    totalItemCount: Optional[int] = Field(
        None, description='The total number of items for this query.'
    )
    pageSize: Optional[int] = Field(
        None,
        description='The number of items to return for each page. This will only return a maximum of 100 items.',
    )
    pageNumber: Optional[int] = Field(None, description='The current page number.')
    pageCount: Optional[int] = Field(
        None, description='The total number of pages available.'
    )


class OutputDtoPagedQueryResultResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[OutputDtoPagedQueryResult] = None
    hasErrors: Optional[bool] = None
    errors: Optional[List[Error]] = None
